import pandas as pd
import os
import matplotlib.pyplot as plt
import seaborn as sns
import matplotlib.patches as mpatches
import matplotlib.cm as cm
import matplotlib.colors as mcolors
import numpy as np
import re
def CaculateNumber(controlFiles:list[str],experimentFiles:list[str],controlName:str,experiemtName:str):
    """
    CaculateNumber function"
    This script is used to caculate the number of total,TE and exon records in each sample and group them into a DataFrame 
    fron the Intersectbed files. 
    infile:
     - sep with tab
     - the thirteen column of the bed file is used to distinguish TE and exon records.
     - TE records have 2 colons in the thirteen column, while exon records start with "ENSMUSG" on behalf of mouse.
    """
    rows = []
    
    for infile in controlFiles:
        df = pd.read_csv(infile,sep="\t",header=None)
        countTE = df[df[13].str.count(":") == 2].shape[0]
        countExon = df[df[13].str.startswith("ENSMUSG", na=False)].shape[0]
        countTotal = df.shape[0]
        if countTE + countExon != countTotal:
            raise ValueError(f"Error: {infile} has {countTotal} records, but {countTE} TE records and {countExon} Gene records")
        sample = os.path.basename(infile).split(".bed")[0]
        rows.append({"Sample":sample,"Total":countTotal,"TE":countTE,"Gene":countExon,"group":f"{controlName}"})
        
    for infile in experimentFiles:
        df = pd.read_csv(infile,sep="\t",header=None)
        countTE = df[df[13].str.count(":") == 2].shape[0]
        countExon = df[df[13].str.startswith("ENSMUSG", na=False)].shape[0]
        countTotal = df.shape[0]
        if countTE + countExon != countTotal:
            raise ValueError(f"Error: {infile} has {countTotal} records, but {countTE} TE records and {countExon} Gene records")
        sample = os.path.basename(infile).split(".bed")[0]
        rows.append({"Sample":sample,"Total":countTotal,"TE":countTE,"Gene":countExon,"group":f"{experiemtName}"})
    df = pd.DataFrame(rows)
    return df
def plotNumber(df:pd.DataFrame,outfile:str):
    """
    plotNumber function: plot the output of CaculateNumber function
    """
    df_melted = df.melt(id_vars=["Sample", "group"], value_vars=["TE", "Gene"], var_name="Category", value_name="Count")
    group_colors = {
    "wild type": "blue",
    "Eif2ak4-/- (GCN2 knock-out)": "red"
    }

    plt.figure(figsize=(14, 10),dpi=300)
    sns.set_style("whitegrid")
    ax = sns.barplot(x="Sample", y="Count", hue="Category", data=df_melted, palette="Set2")
    # legend generated by sns
    handles_cat, labels_cat = ax.get_legend_handles_labels()
    # xtick name color
    for xtick, sample in zip(ax.get_xticklabels(), df["Sample"]):
        group = df.loc[df["Sample"] == sample, "group"].values[0]  # 获取 group
        xtick.set_color(group_colors[group])  # 设置颜色
    
    # legend for xtick
    handles_group = [mpatches.Patch(color=group_colors["wild type"], label="wild type"),
           mpatches.Patch(color=group_colors["Eif2ak4-/- (GCN2 knock-out)"], label="Eif2ak4-/- (GCN2 knock-out)")]
    legend1 = plt.legend(handles=handles_cat, title="feature", loc="upper right",bbox_to_anchor=(1.1, 1))  # 原来的 TE / Exon 图例
    legend2 = plt.legend(handles=handles_group, title="Group", loc="lower right",bbox_to_anchor=(1.1, 1))
    plt.gca().add_artist(legend1)

    plt.xticks(rotation=45, ha="right")
    plt.title("SNP count in TE and Gene per Sample", fontsize=14)
    plt.xlabel("Sample", fontsize=12)
    plt.ylabel("Count", fontsize=12)
    plt.savefig(outfile)

def TopAlterFeature(controlFiles:list[str],experimentFiles:list[str],controlName:str,experiemtName:str,number:int,outfile:str=None):
    """
    GeneStatistic function: get The top alterned feature from controlFiles and experimentFiles.
    infile: The thirteenth is feature,file sep with tab.
    parameter: number decide get top number
    """
    def getTop(df:pd.DataFrame,number:int,group:str):
        # distinguish TE and gene
        pattern = r'^[^:]+:[^:]+:[^:]+$'
        # count feature snp
        geneSNPCount = df[13].value_counts()
        seriesTE = geneSNPCount[geneSNPCount.index.str.match(pattern, na=False)]  #TE
        seriesGene = geneSNPCount[~geneSNPCount.index.str.match(pattern, na=False)] #Gene
        # sort
        seriesTE = seriesTE.sort_values(ascending = False)
        seriesGene = seriesGene.sort_values(ascending = False)
        # get the top alterned feature
        topTE = seriesTE.head(number)
        topTE_df = pd.DataFrame({
            'feature' : topTE.index,
            'type' : ['TE'] * len(topTE),
            'number' : topTE.values
        })
        topGene = seriesGene.head(number)
        topGene_df = pd.DataFrame({
            'feature' : topGene.index,
            'type' : ['gene_id']*len(topGene),
            'number': topGene.values
        })
        result = pd.concat([topTE_df,topGene_df],axis=0)
        result['group'] = group
        return result

    control_list = []
    for infile in controlFiles:
        df = pd.read_csv(infile,sep="\t",header=None)
        control_list.append(df)
    df_control = pd.concat(control_list,axis=0)
    ans1 = getTop(df_control,number,controlName)
    expreiment_list = []
    for infile in experimentFiles:
        df = pd.read_csv(infile,sep="\t",header=None)
        expreiment_list.append(df)
    df_experiment = pd.concat(expreiment_list,axis=0)
    ans2 = getTop(df_experiment,number,experiemtName)
    ans = pd.concat([ans1,ans2],axis=0,ignore_index=True)
    # print(ans)
    if outfile != None:
        ans.to_csv(outfile,index=False)
    return ans

def plotTopfeature(df:pd.DataFrame,outfile:str):
    """
    plotTopfeatrue function:Comparison of top altered TE and gene between Groups

    """ 
    # 计算 gene_id 和 TE 各自的总数
    df_gene = df[df["type"] == "gene_id"].groupby("feature")["number"].sum().reset_index()
    df_te = df[df["type"] == "TE"].groupby("feature")["number"].sum().reset_index()

    # 先对 gene_id 降序排序，再对 TE 降序排序
    df_gene = df_gene.sort_values(by="number", ascending=False)
    df_te = df_te.sort_values(by="number", ascending=False)

    # 生成 feature 的新排序，gene_id 在前，TE 在后
    sorted_features = list(df_gene["feature"]) + list(df_te["feature"])

    # 调整原始数据顺序
    df["feature"] = pd.Categorical(df["feature"], categories=sorted_features, ordered=True)
   
    
    plt.figure(figsize=(18, 12),dpi=300)
    ax = sns.barplot(data=df, x="feature", y="number", hue="group", dodge=True)
    #########legend
    group_colors = {
    "Gene": "blue",
    "TE": "red"
    }
    # legend generated by sns
    
    pattern = r'^[^:]+:[^:]+:[^:]+$'
    # xtick name color
    for xtick in ax.get_xticklabels():
        feature = xtick.get_text()
        if re.match(pattern, feature):
            print(f"{group_colors['TE']}:",feature)
            xtick.set_color(group_colors['TE'])
        else:
            print(f"{group_colors['Gene']}:",feature)
            xtick.set_color(group_colors['Gene'])  
    # legend for xtick
    handles_cat, labels_cat = ax.get_legend_handles_labels()
    handles_group = [mpatches.Patch(color=group_colors["Gene"], label="Gene"),
                     mpatches.Patch(color=group_colors["TE"], label="TE")]
    legend1 = plt.legend(handles=handles_cat, title="Group", loc="upper right",bbox_to_anchor=(1, 1))  # 原来的 group 图例
    legend2 = plt.legend(handles=handles_group, title="feature", loc="lower right",bbox_to_anchor=(1, 0.2))
    plt.gca().add_artist(legend1)
    #########legend
    # 旋转 x 轴标签以提高可读性
    plt.xticks(rotation=25)
    plt.xlabel("Feature")
    plt.ylabel("Number")
    plt.title("Comparison of top altered TE and gene between Groups")
    # plt.legend(title="Group")
    plt.savefig(outfile)
   
def caculateIntervalDistribution(controlFiles:list[str],experimentFiles:list[str],controlNmae:str,experimentName:str,outfile:str=None):
    """
    caculateIntervalDistribution function: make a statistics of the snp distributition,such as ncRNA_exonic,UTR5
    infile:standard multianno.csv produced by the table annotation function of annovar。sep with comma(,)
    no need to pay attentition to TE,because there is no TE in function annotation by annovar
    """
    def csv_read(infile:str):
        data = []
        with open(infile, "r") as file:
            next(file)
            for line in file:
                columns = line.strip().split(",")  # 以逗号分割
                if len(columns) >= 6:  # 确保至少有6列
                    data.append(columns[5])  # 取第六列（索引从 0 开始）
        return pd.Series(data).value_counts()
    controlList = []
    for infile in controlFiles:
        df = pd.read_csv(infile,sep=",") #file disrupted
        funcIntervalSNP = df['Func.refGene'].value_counts()
        # funcIntervalSNP = csv_read(infile)
        sample = os.path.basename(infile).split(".GRCm39_multianno")[0]
        
        df_count = pd.DataFrame({
            'Func' : funcIntervalSNP.index,
            'Number': funcIntervalSNP.values,
            'Sample' : [sample]*len(funcIntervalSNP)
        })
        controlList.append(df_count)
    df_control = pd.concat(controlList,axis=0,ignore_index=True)
    df_control['group'] = controlNmae
    experimentList = []
    for infile in experimentFiles:
        df = pd.read_csv(infile,sep=",") #csv file disrupted
        funcIntervalSNP = df['Func.refGene'].value_counts()
        # funcIntervalSNP = csv_read(infile)
        sample = os.path.basename(infile).split(".GRCm39_multianno")[0]
        
        df_count = pd.DataFrame({
            'Func' : funcIntervalSNP.index,
            'Number': funcIntervalSNP.values,
            'Sample' : [sample]*len(funcIntervalSNP)
        })
        experimentList.append(df_count)
    df_experiment = pd.concat(experimentList,axis=0,ignore_index=True)
    df_experiment['group'] = experimentName
    newdf = pd.concat([df_control,df_experiment],axis=0,ignore_index=True)
    if outfile != None:
        newdf.to_csv(outfile,index=False)
        
    return newdf

def plotIntervalDistribution(df:pd.DataFrame,outfile:str):

    groups = df["group"].unique()
    num_groups = len(groups)
    # 设置图像布局
    fig, axes = plt.subplots(1, num_groups, figsize=(8 * num_groups, 6),dpi=300)

    if num_groups == 1:
        axes = [axes]  # 统一处理 axes 变量
    cmap = plt.colormaps.get_cmap("tab20") 
    unique_funcs = df["Func"].unique()
    color_map = {func: cmap(i / len(unique_funcs)) for i, func in enumerate(unique_funcs)}
    def autopct_format(pct):
        return f'{pct:.1f}%' if pct >= 5 else ''  
    # 遍历不同的 group
    for ax, group in zip(axes, groups):
        subset = df[df["group"] == group]
        func_counts = subset.groupby("Func")["Number"].sum()  # 按 Func 统计 Number 总和

       
        # 画饼图并存储返回值
        colors = [color_map[func] for func in func_counts.index]
        wedges, texts, autotexts = ax.pie(
            func_counts, 
            autopct=autopct_format,
            startangle=140, 
            colors=colors, 
            wedgeprops={'edgecolor': 'black'},
            labeldistance=1.2 
        )
        ax.set_title(f"Functional Distribution\n{group}")
        ax.set_ylabel("")  # 去除 y 轴标签
        # 添加图例
    fig.legend(
        wedges, func_counts.index, 
        title="Func", 
        loc="center",  # 图例居中
        bbox_to_anchor=(0.5, 0.5),  # 调整位置
        ncol=1,  # 控制列数
    )
    
    # 调整布局
    plt.tight_layout()
    fig.savefig(outfile)




        


if __name__ == '__main__':
    ################## intersected vcf statistics#################################
    control = ["/ChIP_seq_2/StemCells/RNASNP202503/waitingflow/output/vcf/SRR17762751.bed",
               "/ChIP_seq_2/StemCells/RNASNP202503/waitingflow/output/vcf/SRR17762748.bed",
               "/ChIP_seq_2/StemCells/RNASNP202503/waitingflow/output/vcf/SRR17762744.bed"]
    experiment = ["/ChIP_seq_2/StemCells/RNASNP202503/waitingflow/output/vcf/SRR17762742.bed",
                  "/ChIP_seq_2/StemCells/RNASNP202503/waitingflow/output/vcf/SRR17762738.bed",
                  "/ChIP_seq_2/StemCells/RNASNP202503/waitingflow/output/vcf/SRR17762739.bed"]
    # ###
    outfile = "/ChIP_seq_2/StemCells/RNASNP202503/waitingflow/output/plot/NumberBar.png"
    df = CaculateNumber(control,experiment,"wild type","Eif2ak4-/- (GCN2 knock-out)")
    # print(df)
    plotNumber(df,outfile)
    # ### 
    # df = TopAlterFeature(control,experiment,"wild type","Eif2ak4-/- (GCN2 knock-out)",5)
    # outfile = "/ChIP_seq_2/StemCells/RNASNP202503/waitingflow/output/plot/TopAlterFeature.png"
    # plotTopfeature(df,outfile)
    ################## intersected vcf statistics#################################
    # control = ["/ChIP_seq_2/StemCells/RNASNP202503/waitingflow/output/annovar/SRR17762751/SRR17762751.GRCm39_multianno.csv",
    #            "/ChIP_seq_2/StemCells/RNASNP202503/waitingflow/output/annovar/SRR17762748/SRR17762748.GRCm39_multianno.csv",
    #            "/ChIP_seq_2/StemCells/RNASNP202503/waitingflow/output/annovar/SRR17762744/SRR17762744.GRCm39_multianno.csv"]
    # experiment = ["/ChIP_seq_2/StemCells/RNASNP202503/waitingflow/output/annovar/SRR17762742/SRR17762742.GRCm39_multianno.csv",
    #               "/ChIP_seq_2/StemCells/RNASNP202503/waitingflow/output/annovar/SRR17762738/SRR17762738.GRCm39_multianno.csv",
    #               "/ChIP_seq_2/StemCells/RNASNP202503/waitingflow/output/annovar/SRR17762739/SRR17762739.GRCm39_multianno.csv"]
    # df = caculateIntervalDistribution(control,experiment,"wild type","Eif2ak4-/- (GCN2 knock-out)","a.csv")
    # outfile = "/ChIP_seq_2/StemCells/RNASNP202503/waitingflow/output/plot/IntervalDistribution.png"
    # plotIntervalDistribution(df,outfile)


    